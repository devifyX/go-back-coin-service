// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/coins.proto

package coinsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoinsService_CreateAccount_FullMethodName = "/coins.v1.CoinsService/CreateAccount"
	CoinsService_Deplete_FullMethodName       = "/coins.v1.CoinsService/Deplete"
)

// CoinsServiceClient is the client API for CoinsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Simple account service for coins creation & depletion.
type CoinsServiceClient interface {
	// Create an account (id) with optional initial coins.
	CreateAccount(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*AccountReply, error)
	// Deplete an amount of coins from an account.
	Deplete(ctx context.Context, in *DepleteRequest, opts ...grpc.CallOption) (*AccountReply, error)
}

type coinsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinsServiceClient(cc grpc.ClientConnInterface) CoinsServiceClient {
	return &coinsServiceClient{cc}
}

func (c *coinsServiceClient) CreateAccount(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, CoinsService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinsServiceClient) Deplete(ctx context.Context, in *DepleteRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, CoinsService_Deplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinsServiceServer is the server API for CoinsService service.
// All implementations must embed UnimplementedCoinsServiceServer
// for forward compatibility.
//
// Simple account service for coins creation & depletion.
type CoinsServiceServer interface {
	// Create an account (id) with optional initial coins.
	CreateAccount(context.Context, *CreateRequest) (*AccountReply, error)
	// Deplete an amount of coins from an account.
	Deplete(context.Context, *DepleteRequest) (*AccountReply, error)
	mustEmbedUnimplementedCoinsServiceServer()
}

// UnimplementedCoinsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoinsServiceServer struct{}

func (UnimplementedCoinsServiceServer) CreateAccount(context.Context, *CreateRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCoinsServiceServer) Deplete(context.Context, *DepleteRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deplete not implemented")
}
func (UnimplementedCoinsServiceServer) mustEmbedUnimplementedCoinsServiceServer() {}
func (UnimplementedCoinsServiceServer) testEmbeddedByValue()                      {}

// UnsafeCoinsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinsServiceServer will
// result in compilation errors.
type UnsafeCoinsServiceServer interface {
	mustEmbedUnimplementedCoinsServiceServer()
}

func RegisterCoinsServiceServer(s grpc.ServiceRegistrar, srv CoinsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoinsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoinsService_ServiceDesc, srv)
}

func _CoinsService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinsServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinsService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinsServiceServer).CreateAccount(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinsService_Deplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinsServiceServer).Deplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinsService_Deplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinsServiceServer).Deplete(ctx, req.(*DepleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinsService_ServiceDesc is the grpc.ServiceDesc for CoinsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coins.v1.CoinsService",
	HandlerType: (*CoinsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _CoinsService_CreateAccount_Handler,
		},
		{
			MethodName: "Deplete",
			Handler:    _CoinsService_Deplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/coins.proto",
}
